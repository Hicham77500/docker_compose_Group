services:
  backend:
    image: excalibur404/tp-docker-compose-backend:latest
    build: ./backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    env_file:
      - .env
    # Le backend attend que le service db soit sain grâce à depends_on et au healthcheck défini dans db.
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal
    restart: always
    volumes:
      - backend_data:/data
  frontend:
    image: excalibur404/tp-docker-compose-frontend:latest
    build: ./frontend
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - internal
    restart: always
  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=youruser
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_DB=mydb
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks:
      - internal
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U youruser -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5
networks:
  internal:
    driver: bridge
volumes:
  backend_data:
  db_data:
